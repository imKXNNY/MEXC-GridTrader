// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0
// © itzK

//@version=6
strategy(title = "Stuck in a Box (BTC & ETH) - Full Refactor", shorttitle = "BoxEnhanced_Full", overlay = true, default_qty_type = strategy.percent_of_equity, initial_capital = 20, pyramiding = 1, commission_type = strategy.commission.percent, commission_value = 0.0, slippage = 0, max_bars_back = 500)

//===== INPUTS =====//

// 1) Box & RSI
boxLookback       = input.int(31,  title="Box Lookback Period")
rsiLength         = input.int(14,  title="RSI Length")
useStricterRSI    = input.bool(false, "Use Stricter RSI? (RSI > 50)")
rsiThreshold      = input.int(50,   title="RSI Threshold (if not > 50)")

// 2) Risk Management
riskPercent       = input.float(1, "Risk % of Equity", step=0.1)

// 3) Cooldown
useCooldown       = input.bool(false, "Use Cooldown Filter?")
cooldownBars      = input.int(1,  "Cooldown Bars", tooltip="Bars to wait after last entry")

// 4) Candlestick Confirmation
useNextBarConfirm = input.bool(false, "Confirm on Next Bar?",
   tooltip="If true, use the previous bar's pattern & nearSupport for confirmation")

// 5) ATR-Based Stops
useATRStops       = input.bool(true, "Use ATR-based Stop & Target?")
atrPeriod         = input.int(14,   "ATR Period")
atrMultiplier     = input.float(2.0,"ATR Multiplier")

// 6) MACD Filter
useMACDFilter     = input.bool(true, "Use MACD Filter?")
macdFastLen       = input.int(14, "MACD Fast Length")
macdSlowLen       = input.int(28, "MACD Slow Length")
macdSignalLen     = input.int(9,  "MACD Signal Length")
macdAboveSignal   = input.bool(true, "MACD Condition (MACD>Signal if true, else MACD>0)?")

// 7) Partial Profit-Taking
usePartialExits   = input.bool(true, "Use Partial Profit-Taking?")
partialPerc       = input.float(10,  "Partial Exit %",        step=1,   tooltip="Close X% of position early")
partialATRMult    = input.float(10.0, "Partial Exit ATR Mult",           tooltip="Exit partial at close+X*ATR")
finalATRMult      = input.float(15.0, "Final Exit ATR Mult",             tooltip="Exit remainder at close+X*ATR")

// 8) Limit Simulation Time
bars_back = input.int(defval=500, title="Custom Bars back")

////////////////////////////////////////////////////////////////////////////////
// PREPARE BARS BACK TIME-LIMITING
////////////////////////////////////////////////////////////////////////////////
f_resInMiliseconds() => 
    _resInMiliseconds = 60000 * timeframe.multiplier * (
      timeframe.isseconds ? 1. / 60             :
      timeframe.isminutes ? 1.                  :
      timeframe.isdaily   ? 60. * 24            :
      timeframe.isweekly  ? 60. * 24 * 7        :
      timeframe.ismonthly ? 60. * 24 * 30.4375  : na)
      
bar_diff = int((timenow-time) / f_resInMiliseconds())
bar_in_window = bar_diff < bars_back

////////////////////////////////////////////////////////////////////////////////
// 1) CALCULATE THE BOX
////////////////////////////////////////////////////////////////////////////////
boxHigh  = ta.highest(high, boxLookback)
boxLow   = ta.lowest(low, boxLookback)
boxMid   = (boxHigh + boxLow) / 2

////////////////////////////////////////////////////////////////////////////////
// 2) RSI
////////////////////////////////////////////////////////////////////////////////
rsiVal   = ta.rsi(close, rsiLength)

////////////////////////////////////////////////////////////////////////////////
// 3) PRICE PATTERNS (Hammer / Doji near box bottom)
////////////////////////////////////////////////////////////////////////////////
lowestLow  = ta.lowest(low, 5)
isHammer   = close > open and low == lowestLow and (high - close) > 2 * (close - open)
isDoji     = math.abs(close - open) < (high - low) * 0.1

bool nearSupportNow  = close   > boxLow   * 0.98 and close   < boxLow   * 1.02
bool nearSupportPrev = close[1]> boxLow[1]* 0.98 and close[1]< boxLow[1]* 1.02

bool cndlPatternNow  = (isHammer or isDoji)
bool cndlPatternPrev = (isHammer[1] or isDoji[1])

// Next-bar confirm => use previous bar's pattern & nearSupport
bool finalCandlCheck = useNextBarConfirm ? cndlPatternPrev  : cndlPatternNow
bool finalSupportChk = useNextBarConfirm ? nearSupportPrev   : nearSupportNow

////////////////////////////////////////////////////////////////////////////////
// 4) RSI CONFIRMATION
////////////////////////////////////////////////////////////////////////////////
bool rsiCheck = if useStricterRSI
    rsiVal > 50
else
    rsiVal > rsiThreshold

////////////////////////////////////////////////////////////////////////////////
// 5) MACD FILTER (If enabled)
////////////////////////////////////////////////////////////////////////////////
[macdLine, macdSignal, macdHist] = ta.macd(close, macdFastLen, macdSlowLen, macdSignalLen)
bool macdOk = macdAboveSignal
  ? (macdLine > macdSignal)  // MACD line above signal line
  : (macdLine > 0)           // MACD line above zero
bool finalMACDCheck = not useMACDFilter or macdOk

////////////////////////////////////////////////////////////////////////////////
// 6) ENTRY CONDITION
////////////////////////////////////////////////////////////////////////////////
bool entryCondition = bar_in_window
                 and finalCandlCheck
                 and finalSupportChk
                 and rsiCheck
                 and finalMACDCheck

////////////////////////////////////////////////////////////////////////////////
// 7) COOLDOWN
////////////////////////////////////////////////////////////////////////////////
var int lastEntryBarIndex = na
bool cooldownPassed       = true
if useCooldown
    cooldownPassed := (bar_index - lastEntryBarIndex) > cooldownBars

bool tradeSignal = entryCondition

////////////////////////////////////////////////////////////////////////////////
// 8) DETERMINE STOPS & TARGETS
////////////////////////////////////////////////////////////////////////////////
float stopLoss   = na
float takeProfit = na
float atrVal     = ta.atr(atrPeriod)

if useATRStops
    stopLoss     := close - atrVal * atrMultiplier
    takeProfit   := close + atrVal * atrMultiplier
else
    // Original box-based logic
    stopLoss     := boxLow  * 0.98
    takeProfit   := boxHigh * 0.98

////////////////////////////////////////////////////////////////////////////////
// 9) RISK MGMT & ORDER EXECUTION
////////////////////////////////////////////////////////////////////////////////
if tradeSignal
    lastEntryBarIndex := bar_index

    float riskAmount   = strategy.equity * (riskPercent / 100)
    float positionSize = riskAmount / math.max((close - stopLoss), 0.000001)

    // Submit Entry
    strategy.entry("StuckInBox", strategy.long, qty=positionSize)

    // If partial exits not used, do single exit
    if not usePartialExits
        strategy.exit("Stop/Target", "StuckInBox", stop=stopLoss, limit=takeProfit)
    else
        // PARTIAL EXIT logic
        float partialQty   = positionSize * (partialPerc / 100.0)

        // 1) partial exit at smaller ATR multiple
        float partialLimit = close + atrVal * partialATRMult
        strategy.exit("Partial Exit", "StuckInBox", qty = partialQty, limit = partialLimit, stop = na)

        // 2) final exit on remainder
        float finalLimit   = close + atrVal * finalATRMult
        strategy.exit("Final Exit", "StuckInBox", stop = stopLoss, limit = finalLimit)

////////////////////////////////////////////////////////////////////////////////
// 10) PLOTTING
////////////////////////////////////////////////////////////////////////////////
plot(boxHigh, title="Box Top",    color=color.red,   linewidth=1, style=plot.style_stepline)
plot(boxLow,  title="Box Bottom", color=color.green, linewidth=1, style=plot.style_stepline)
plot(boxMid,  title="Box Midline",color=color.blue,  linewidth=1, style=plot.style_stepline)

// Debug label for entry signals
plotshape(series = tradeSignal, style = shape.labelup, location = location.belowbar, color = color.green, size = size.tiny, text = "Entry")
